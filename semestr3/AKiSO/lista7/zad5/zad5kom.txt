.text
	.global	main

gcd:
.L2:
	cmp	r0, r1 			;porównaj r0 i r1
	bxeq	lr			; jeżeli to samo, to return 
	subgt	r0, r0, r1		;  jeżeli r0 > r1, to r0 = r0-r1
	suble	r1, r1, r0		; jeżeli r0 < r1, to r1 = r0-r1 
	b	.L2			; i wracamy do .L2 

main:

	push	{r0, r1, r4, lr}	;na stos wrzuć r0, r1, r4, lr 
	ldr	r4, .L9			; wczytaj do r4 
	mov	r1, sp			; r1 <- pointer na aktywny stos 
	mov	r0, r4			; r0 = r4 
	bl	scanf			; bl - branch with link, idź do scanfa 
	add	r1, sp, #4		; r1 = sp+4 
	mov	r0, r4			; r0 = r4 
	bl	scanf			; wywołaj scanf 
	ldm	sp, {r0, r1}		; load multiple - wczytaj ze stosu do r0 i do r1
	bl	gcd			; wywołaj gcd(i zwróć) 
	mov	r1, r0			; do r1 daj r0 
	mov	r0, r4			; do r4 daj r4
	bl	printf			; wywołaj printfa 
	mov	r0, #0			; r0 = 0
	add	sp, sp, #8		; sp = sp+8
	pop	{r4, lr}		; usuń r4 i lr ze stosu 
	bx	lr			; zmień instrukcję na lr - lr to "zwróć" 
.L9:
	.word	.LC0
.LC0:
	.ascii	"%d\000"
