
               org $1000		; od 1000-cznego adresu pamięci zapisujemy liczby

start          
		lda #18			; ładowanie 18 pod a
		ldx #64			; ładowanie 64 pod x
		jsr mulu
                brk

mulu		
		eor #$FF		; xor a z samymi jedynkami - negacja a powstaje
		sta bta
		stx btb
		ldx #0			
		stx btb+1
		stx rsl
		stx rsl+1
		ldx #8			; robimy loopa na 8 przejść

; mnożenie 
mul_lop		
		lsr bta			; przeuwanie bta w prawo
		bcs mul_nxt		; jump jeśli flaga c = 1
		lda btb			
		adc rsl			; a = a + rsl + C
		sta rsl			; rsl = a
		lda btb+1	
		adc rsl+1
		sta rsl+1

; zmiana bitu na kolejny
mul_nxt		
		asl btb			; przesuń btb w lewo ( C = 1 gdy pierwszy bit = 1) czyli pomnóż przez 2
		rol btb+1		; dodanie na kolejnym bajcie btb 1 jeśli w btb wyszliśmy po za 4 bit
		dex			; x--
		bne mul_lop		; jeżeli x != 0 to jump do mul_lop
		lda rsl
		ldx rsl+1
		rts			; return do jump and store 

bta		dta b(0)	; bta jedno  bajtowe
btb		dta a(0)	; btb dwu bajtowe
rsl		dta a(0)	; rsl dwu bajtowe
text            equ *		; coś mocnego

                org $2E0	; coś z pamięcią
                dta a(start)	

                end of file
