1. 	CREATE DATABASE Hobby;
	CREATE USER 'piotr25'@'localhost' identified by '521052'
	GRANT SELECT, UPDATE, INSERT ON Hobby.* to 'piotr25'@'localhost'

2.	create table osoba ( id int NOT NULL AUTO_INCREMENT , imie varchar(20) NOT NULL DEFAULT('*'), dataUrodzenia date NOT NULL CHECK( TIMESTAMPDIFF(YEAR, dataUrodzenia, '2019-11-24') >= 18) DEFAULT('1950-1-1'), plec char(1) NOT NULL DEFAULT('n'), PRIMARY KEY (id));
	create table sport (id int NOT NULL AUTO_INCREMENT, nazwa varchar(20) NOT NULL DEFAULT('*'), typ enum('indywidualny', 'druzynowy', 'mieszany') DEFAULT ('druzynowy'), lokacja varchar(20), PRIMARY KEY(id));
	create table nauka (id int NOT NULL AUTO_INCREMENT, nazwa varchar(20) NOT NULL DEFAULT('*'), lokacja varchar(20), PRIMARY KEY (id));
	create table inne (id int NOT NULL AUTO_INCREMENT, nazwa varchar(20) NOT NULL DEFAULT('*'), lokacja varchar(20), towarzysze bool NOT NULL DEFAULT('prawda'), PRIMARY KEY (id));
	create table hobby (osoba int NOT NULL DEFAULT -1, id int NOT NULL DEFAULT -1, typ enum('sport', 'nauka', 'inne') NOT NULL DEFAULT('inne'), PRIMARY KEY(osoba, id , typ)); 

3.	create table zwierzak AS (SELECT * FROM menagerie.pet);

	INSERT INTO osoba(imie, dataUrodzenia, plec)
	
	SELECT owner,
	DATE_FORMAT(
		FROM_UNIXTIME(
			unix_timestamp('1985-1-1') + floor( rand() * (unix_timestamp('2000-12-31') - unix_timestamp('1985-1-1') +1))), '%Y-%m-%d'),
	ELT(FLOOR(RAND()*2 + 1), 'M', 'F')
	FROM ( SELECT DISTINCT owner FROM menagerie.pet) AS byleco;

	
4. 	ALTER TABLE osoba ADD COLUMN nazwisko varchar(50) AFTER imie;
	
	ALTER TABLE zwierzak ADD COLUMN ownerID INT AFTER name;
	
	UPDATE zwierzak INNER JOIN osoba ON zwierzak.owner = osoba.imie SET zwierzak.ownerID = osoba.id;
	
	ALTER TABLE zwierzak DROP COLUMN owner;
	
5. 	ALTER TABLE zwierzak ADD FOREIGN KEY (ownerID) REFERENCES osoba(id);
	ALTER TABLE hobby ADD FOREIGN KEY (osoba) REFERENCES osoba(id);
	
6.	ALTER TABLE inne AUTO_INCREMENT = 7000;
	
7.	DELIMITER $$
CREATE PROCEDURE generuj (
    IN name VARCHAR(25),
	IN num INT
)
BEGIN
	DECLARE counter INT DEFAULT 0;
	DECLARE zajecie enum('sport', 'nauka', 'inne') DEFAULT 'sport';
	DECLARE zajecieID INT DEFAULT 0;
	DECLARE osobaID INT DEFAULT 0;
	countLoop: LOOP
		IF counter<num THEN
			IF name='osoba' THEN
				INSERT INTO osoba VALUES (NULL, LEFT(MD5(RAND()),6), LEFT(MD5(RAND()),6), (SELECT date FROM randomDate), ELT(FLOOR(RAND()*2)+1,'m','f'));
			ELSEIF name='sport' THEN
				INSERT INTO sport VALUES (NULL, LEFT(MD5(RAND()),6), ELT(FLOOR(RAND()*3)+1,'indywidualny', 'drużynowy', 'mieszany'), LEFT(MD5(RAND()),6));
			ELSEIF name='nauka' THEN
				INSERT INTO nauka VALUES (NULL, LEFT(MD5(RAND()),6), LEFT(MD5(RAND()),6));
			ELSEIF name='inne' THEN
				INSERT INTO inne VALUES (NULL, LEFT(MD5(RAND()),6), LEFT(MD5(RAND()),6), ELT(FLOOR(RAND()*2)+1, TRUE, FALSE) );
			ELSEIF name='hobby' THEN
				SET zajecie = (SELECT ELT(FLOOR(RAND()*3)+1, 'sport', 'nauka', 'inne'));
				SET osobaID = (SELECT id FROM osoba ORDER BY RAND() LIMIT 1);
				
				IF zajecie='sport' THEN
					SET zajecieID = (SELECT id FROM sport ORDER BY RAND() LIMIT 1);
				ELSEIF zajecie='nauka' THEN
					SET zajecieID = (SELECT id FROM nauka ORDER BY RAND() LIMIT 1);
				ELSEIF zajecie='inne' THEN
					SET zajecieID = (SELECT id FROM inne ORDER BY RAND() LIMIT 1);
				END IF;
				INSERT INTO hobby VALUES (zajecieID,osobaID,zajecie);	
			END IF;
			SET counter = counter + 1;
			ITERATE countLoop;
		END IF;
		LEAVE countLoop;
	END LOOP countLoop;
END$$
DELIMITER ;		

	

CREATE VIEW randomDate AS SELECT DATE_FORMAT(
	FROM_UNIXTIME(
		unix_timestamp('1990-1-1') + floor(
			rand() * (unix_timestamp('1999-12-31') - unix_timestamp('1990-1-1') + 1)
		)
	),
	'%Y-%m-%d') AS date;
	


CALL generuj('osoba', 1000);
CALL generuj('sport', 300);
CALL generuj('nauka', 300);
CALL generuj('inne', 550);
CALL generuj('hobby', 1300);



8. 	CREATE VIEW mergedHobbies2 AS (
			(SELECT id,nazwa, 'sport' AS kategoria FROM sport) UNION (SELECT id, nazwa, 'nauka' AS kategoria FROM nauka) UNION (SELECT id,nazwa, 'inne' AS kategoria FROM inne)
	);
			
	PREPARE query FROM 'SELECT DISTINCT nazwa FROM mergedHobbies2 WHERE (id, kategoria) in (SELECT id, typ FROM hobby WHERE osoba = ? AND typ = ?)';
	SET @id = 125;
	SET @typ = 'nauka';
	EXECUTE query USING @id, @typ;
	
	-- 5e43d4 - odp
	
9. PREPARE showHobby FROM 'SELECT DISTINCT nazwa FROM mergedHobbies2 WHERE (id, kategoria) IN (SELECT id, typ FROM hobby WHERE osoba = ?)';
	SET @id = 25; -- odp 3e37fa
	SET @id = 100 -- odp 5ec95f
	EXECUTE showHobby USING @id;
	
	
10. PREPARE showHobby FROM '(SELECT DISTINCT nazwa FROM mergedHobbies2 WHERE (id, kategoria) IN (SELECT id, typ FROM hobby WHERE osoba = ?)) UNION (SELECT DISTINCT species AS nazwa FROM zwierzak where ownerID = ?)';
	SET @id = 4; 
	EXECUTE showHobby USING @id;
	
--	| 3e37fa |
--	| dog    |  odp
--	| hamster|

11. DELIMITER $$
	CREATE TRIGGER addHobby AFTER INSERT ON Hobby
	FOR EACH ROW
	BEGIN
				INSERT IGNORE INTO osoba VALUES(
					NULL,
					ELT(FLOOR(RAND()*10 +1), 'aB','bC','cD','dE','eF','fG','gH','hI','iJ','jK'),
					ELT(FLOOR(RAND()*10 +1), 'a','b','c','d','e','f','g','h','i','j'),
					ELT(FLOOR(RAND()*10 +1), '1990-2-2','1991-3-3','1992-4-4','1993-4-4','1994-5-5','1995-6-6','1996-7-7','1997-8-8','1998-9-9','1999-10-10'),
					ELT(FLOOR(RAND()*2 +1), 'M','F'));
	
				IF(NEW.typ = 'sport') THEN 
					INSERT IGNORE INTO sport VALUES (
						NULL,
						ELT(FLOOR(RAND()*10 +1), 'a','b','c','d','e','f','g','h','i','j'),
						ELT(FLOOR(RAND()*3)+1,'indywidualny', 'drużynowy', 'mieszany'),
						ELT(FLOOR(RAND()*10 +1), 'aa','bb','cc','dd','ee','ff','gg','hh','ii','jj'));
				ELSEIF(NEW.typ = 'nauka') THEN
					INSERT IGNORE INTO nauka VALUES (
						NULL,
						ELT(FLOOR(RAND()*10 +1), 'a','b','c','d','e','f','g','h','i','j'),
						ELT(FLOOR(RAND()*10 +1), 'aa','bb','cc','dd','ee','ff','gg','hh','ii','jj'));
				ELSEIF(NEW.typ = 'inne') THEN
					INSERT IGNORE INTO inne VALUES(
						NULL,
						ELT(FLOOR(RAND()*10 +1), 'a','b','c','d','e','f','g','h','i','j'),
						ELT(FLOOR(RAND()*10 +1), 'aa','bb','cc','dd','ee','ff','gg','hh','ii','jj'),
						ELT(FLOOR(RAND()*2 +1), 'prawda','fałsz'));
				END IF;
				
				
	END$$
	DELIMITER ;
	
	
	INSERT INTO hobby VALUES(1002,1002, 'nauka');
	
	
12. DELIMITER $$
	CREATE TRIGGER deleteSport AFTER DELETE ON sport
	FOR EACH ROW
	BEGIN
			DELETE FROM hobby WHERE hobby.id = OLD.id AND hobby.typ = 'sport';
	END$$
	DELIMITER ;
	
13. DELIMITER $$
	CREATE TRIGGER deleteNauka AFTER DELETE ON nauka
	FOR EACH ROW
	BEGIN
			DELETE FROM hobby WHERE hobby.id = OLD.id AND hobby.typ = 'nauka';
	END$$
	DELIMITER ;
	
14. DELIMITER $$
	CREATE TRIGGER deleteOsoba BEFORE DELETE ON osoba
	FOR EACH ROW
	BEGIN
		DELETE FROM hobby WHERE hobby.id = OLD.ID;
		UPDATE zwierzak SET ownerID = (SELECT id FROM osoba ORDER BY RAND() LIMIT 1) WHERE zwierzak.ownerID = OLD.ID;
	END$$
	DELIMITER ;
	
15. TAK MOGĄ

16. CREATE VIEW liczbaHobby AS(
		SELECT hobby.id, hobby.typ, COUNT(*) AS liczba FROM hobby GROUP BY hobby.id, hobby.typ	
	);
	
17. DELIMITER $$
	CREATE FUNCTION liczHobby (userID INT)
	RETURNS INT DETERMINISTIC
	BEGIN
		DECLARE count INT;
		SET count = (SELECT COUNT(*) AS ilosc FROM (SELECT DISTINCT nazwa FROM mergedHobbies2 WHERE (id, kategoria) IN (SELECT id, typ FROM hobby WHERE hobby.osoba=userID)) AS lala);
		RETURN count;
	END$$
	DELIMITER ;	

	DELIMITER $$
	CREATE FUNCTION liczZwierzaki (userID INT)
	RETURNS INT DETERMINISTIC
	BEGIN
		DECLARE count INT;
		SET count = (SELECT COUNT(*) AS ilosc FROM (SELECT DISTINCT species FROM zwierzak WHERE zwierzak.ownerID = userID) AS lala);
		RETURN count;
	END$$
	DELIMITER ;	
	
	CREATE VIEW hobbyUser AS ( SELECT id,imie, liczHobby(id) as iloscHobby, liczZwierzaki(id) as iloscZwierzaki  FROM osoba);


18. DELIMITER $$ 
	CREATE PROCEDURE najwiecejHobby(
	OUT imieOut varchar(20),
	OUT wiekOut INT
	)
	BEGIN 
		SELECT imie, TIMESTAMPDIFF(YEAR, osoba.dataUrodzenia, CURDATE()) INTO @imie, @wiek FROM osboa WHERE osboa.id = (SELECT osoba FROM hobbyUser ORDER BY iloscHobby DESC LIMIT 1);
		SET imieOut = @imie;
		SET wiekOut = @wiek;
		SELECT @imieOut, @wiekOut;
	END$$ 
	DELIMITER ;
	
19. Nie wykonamy wszystkich zadań, w których pojawiają się inne funkcje niż te trzy: SELECT, UPDATE, INSERT.
